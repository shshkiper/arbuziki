import 'dart:async';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'order_service.dart';

class OrderSimulationService {
  static final Map<String, Timer> _activeTimers = {};
  static const int _preparationTime = 90; // 1.5 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

  // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
  static void startOrderSimulation(String orderId) {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    _activeTimers[orderId]?.cancel();

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    _activeTimers[orderId] = Timer.periodic(
      const Duration(seconds: 30), // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      (timer) => _updateOrderStatus(orderId, timer),
    );

    print('üîÑ –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  static Future<void> _updateOrderStatus(String orderId, Timer timer) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      final response =
          await Supabase.instance.client
              .from('orders')
              .select('status, created_at')
              .eq('id', orderId)
              .single();

      final currentStatus = response['status'] as String;
      final createdAt = DateTime.parse(response['created_at'] as String);
      final timeElapsed = DateTime.now().difference(createdAt).inSeconds;

      String newStatus;

      // –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      if (currentStatus == 'pending' && timeElapsed >= 30) {
        newStatus = 'preparing';
      } else if (currentStatus == 'preparing' &&
          timeElapsed >= _preparationTime) {
        newStatus = 'ready';
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–∞–π–º–µ—Ä, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤
        timer.cancel();
        _activeTimers.remove(orderId);
      } else {
        // –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
      await OrderService.updateOrderStatus(orderId, newStatus);

      print('üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ $orderId –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: $newStatus');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ $orderId: $e');
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
      timer.cancel();
      _activeTimers.remove(orderId);
    }
  }

  // –û—Ç–º–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞
  static void cancelOrderSimulation(String orderId) {
    _activeTimers[orderId]?.cancel();
    _activeTimers.remove(orderId);
    print('‚èπÔ∏è –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId –æ—Ç–º–µ–Ω–µ–Ω–∞');
  }

  // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π
  static void cancelAllSimulations() {
    for (final timer in _activeTimers.values) {
      timer.cancel();
    }
    _activeTimers.clear();
    print('‚èπÔ∏è –í—Å–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
  static int getRemainingTime(String orderId, DateTime createdAt) {
    final timeElapsed = DateTime.now().difference(createdAt).inSeconds;
    final remaining = _preparationTime - timeElapsed;
    return remaining > 0 ? remaining : 0;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
  static bool isSimulationActive(String orderId) {
    return _activeTimers.containsKey(orderId);
  }
}
