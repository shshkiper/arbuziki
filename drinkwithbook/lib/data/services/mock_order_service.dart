import 'dart:math';
import '../models/order_model.dart';

class MockOrderService {
  static final List<OrderModel> _orders = [];
  static final Random _random = Random();

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–º–æ–∫-–≤–µ—Ä—Å–∏—è)
  static Future<OrderModel> createOrder({
    required List<OrderItem> items,
    required double totalAmount,
    String? notes,
    String orderType = 'pickup',
    int loyaltyPointsUsed = 0,
  }) async {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
    await Future.delayed(const Duration(milliseconds: 500));

    print('üõí [MOCK] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');
    print('üë§ [MOCK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    print('üìù [MOCK] –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î...');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID
    final orderId = 'mock_${_random.nextInt(999999)}';
    print('‚úÖ [MOCK] –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID: $orderId');

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    final order = OrderModel(
      id: orderId,
      userId: 'mock_user_id',
      items: items,
      totalAmount: totalAmount,
      status: 'pending',
      createdAt: DateTime.now(),
      notes: notes,
      orderType: orderType,
      estimatedTime: 90,
      loyaltyPointsUsed: loyaltyPointsUsed,
      loyaltyPointsEarned: (totalAmount / 10).round(),
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
    _orders.insert(0, order);

    print('üì¶ [MOCK] –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ —Å–æ–∑–¥–∞–Ω—ã');
    print('‚è∞ [MOCK] –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞');

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞
    _startMockSimulation(orderId);

    return order;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<List<OrderModel>> getUserOrders() async {
    await Future.delayed(const Duration(milliseconds: 300));
    return List.from(_orders);
  }

  // –°—Ç—Ä–∏–º –∑–∞–∫–∞–∑–æ–≤
  static Stream<List<OrderModel>> watchUserOrders() async* {
    while (true) {
      yield List.from(_orders);
      await Future.delayed(const Duration(seconds: 2));
    }
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  static void _startMockSimulation(String orderId) {
    Future.delayed(const Duration(seconds: 30), () {
      _updateOrderStatus(orderId, 'preparing');
    });

    Future.delayed(const Duration(seconds: 90), () {
      _updateOrderStatus(orderId, 'ready');
    });
  }

  static void _updateOrderStatus(String orderId, String newStatus) {
    final orderIndex = _orders.indexWhere((order) => order.id == orderId);
    if (orderIndex != -1) {
      final order = _orders[orderIndex];
      final updatedOrder = order.copyWith(
        status: newStatus,
        readyAt: newStatus == 'ready' ? DateTime.now() : order.readyAt,
        completedAt:
            newStatus == 'completed' ? DateTime.now() : order.completedAt,
      );
      _orders[orderIndex] = updatedOrder;
      print('üì¶ [MOCK] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ $orderId –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: $newStatus');
    }
  }

  // –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
  static Future<void> cancelOrder(String orderId) async {
    _updateOrderStatus(orderId, 'cancelled');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  static Future<void> updateOrderStatus(String orderId, String status) async {
    _updateOrderStatus(orderId, status);
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  static void clearAllOrders() {
    _orders.clear();
  }
}
